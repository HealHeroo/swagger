openapi: 3.0.3
info:
  title: Dokumen API Cloud Function - OpenAPI 3.0
  description: >-
    Dokumen API Cloud Function Aplikasi Kesehatan HealHero
  termsOfService: https://github.com/HealHeroo/swagger
  contact:
    email: juwitastefany13@gmail.com
  license:
    name: HealHero Package
    url: https://pkg.go.dev/github.com/HealHeroo/be_healhero
  version: 1.0.11
externalDocs:
  description: Repo GCF
  url: https://github.com/HealHeroo/gcf_healhero
servers:
  - url: https://asia-southeast2-peak-equator-402307.cloudfunctions.net
tags:
  - name: Auth
    description: Auth to Access to API
    externalDocs:
      description: Deskripsi dan Kode Program
      url: https://github.com/HealHeroo/gcf_healhero/tree/main/login
  - name: User
    description: Data User
    externalDocs:
      description: Deskripsi dan Kode Program
      url: https://github.com/HealHeroo/gcf_healhero/tree/main/user
  - name: Pengguna
    description: Pengguna to Access to API
    externalDocs:
      description: Deskripsi dan Kode Program
      url: https://github.com/HealHeroo/gcf_healhero/tree/main/pengguna
  - name: Driver
    description: Driver to Access to API
    externalDocs:
      description: Deskripsi dan Kode Program
      url: https://github.com/HealHeroo/gcf_healhero/tree/main/driver
  - name: Obat
    description: Obat to Access to API
    externalDocs:
      description: Deskripsi dan Kode Program
      url: https://github.com/HealHeroo/gcf_healhero/tree/main/obat
  - name: Order
    description: Order to Access to API
    externalDocs:
      description: Deskripsi dan Kode Program
      url: https://github.com/HealHeroo/gcf_healhero/tree/main/order
paths:
  /login:
    post:
      tags:
        - Auth
      summary: Login get Token
      description: Login and Get User Token
      operationId: authService
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Login"
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/AuthResponse"
        "405":
          description: Invalid input
  /user:
    get:
      tags:
        - User
      summary: Get All User
      description: List Data User
      operationId: getUserJSON
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: "#/components/schemas/User"
        "400":
          description: Invalid status value
      security:
        - token:
            - write:apiKey
            - read:apiKey
  /pengguna/{penggunaId}:
    get:
      tags:
        - Pengguna
      summary: Get Pengguna by ID
      description: Get a Pengguna by its ID
      operationId: getPenggunaById
      parameters:
        - name: penggunaId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Pengguna
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Pengguna"
        "404":
          description: Pengguna not found
      security:
        - token:
            - write:apiKey
            - read:apiKey
    put:
      tags:
        - Pengguna
      summary: Update Pengguna
      description: Update an existing Pengguna
      operationId: updatePengguna
      parameters:
        - name: penggunaId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Pengguna
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Pengguna"
      responses:
        "200":
          description: Pengguna updated successfully
        "404":
          description: Pengguna not found
      security:
        - token:
            - write:apiKey
            - read:apiKey
  /driver/{driverId}:
    get:
      tags:
        - Driver
      summary: Get Driver by ID
      description: Get a Driver by its ID
      operationId: getDriverById
      parameters:
        - name: driverId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Driver
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Driver"
        "404":
          description: Driver not found
      security:
        - token:
            - write:apiKey
            - read:apiKey
    put:
      tags:
        - Driver
      summary: Update Driver
      description: Update an existing Driver
      operationId: updateDriver
      parameters:
        - name: driverId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Driver
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Driver"
      responses:
        "200":
          description: Driver updated successfully
        "404":
          description: Driver not found
      security:
        - token:
            - write:apiKey
            - read:apiKey
  /obat:
    get:
      tags:
        - Obat
      summary: Get All Obat
      description: List Data Obat
      operationId: getAllObat
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/ObatArray"
      security:
        - token:
            - write:apiKey
            - read:apiKey
    post:
      tags:
        - Obat
      summary: Create Obat
      description: Create a new Obat
      operationId: creatObat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Obat"
      responses:
        "201":
          description: Obat created successfully
        "400":
          description: Invalid input
      security:
        - token:
            - write:apiKey
            - read:apiKey
  /obat/{obatId}:
    get:
      tags:
        - Obat
      summary: Get Obat by ID
      description: Get a Obat by its ID
      operationId: getObatById
      parameters:
        - name: obatId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Obat
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Obat"
        "404":
          description: Obat not found
      security:
        - token:
            - write:apiKey
            - read:apiKey
    put:
      tags:
        - Obat
      summary: Update Obat
      description: Update an existing Obat
      operationId: updateObat
      parameters:
        - name: obatId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Obat
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Obat"
      responses:
        "200":
          description: Obat updated successfully
        "404":
          description: Obat not found
      security:
        - token:
            - write:apiKey
            - read:apiKey
    delete:
      tags:
        - Obat
      summary: Delete Obat
      description: Delete a Obat by its ID
      operationId: deleteObat
      parameters:
        - name: obatId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Obat
      responses:
        "204":
          description: Obat deleted successfully
        "404":
          description: Obat not found
      security:
        - token:
            - write:apiKey
            - read:apiKey
  /order:
    get:
      tags:
        - Order
      summary: Get All Order
      description: List Data Order
      operationId: getAllOrder
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/OrderArray"
      security:
        - token:
            - write:apiKey
            - read:apiKey
    post:
      tags:
        - Order
      summary: Create Order
      description: Create a new Order
      operationId: createOrder
      requestBody:
        content:
          application/json:
            schema:
              $ref: "#/components/schemas/Order"
      responses:
        "201":
          description: Order created successfully
        "400":
          description: Invalid input
      security:
        - token:
            - write:apiKey
            - read:apiKey
  /order/{orderId}:
    get:
      tags:
        - Order
      summary: Get Order by ID
      description: Get a Order by its ID
      operationId: getOrderById
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Order
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/Order"
        "404":
          description: Order not found
      security:
        - token:
            - write:apiKey
            - read:apiKey
    delete:
      tags:
        - Order
      summary: Delete Order
      description: Delete a Order by its ID
      operationId: deleteOrder
      parameters:
        - name: orderId
          in: path
          required: true
          schema:
            type: string
          description: ID of the Order
      responses:
        "204":
          description: Order deleted successfully
        "404":
          description: Order not found
      security:
        - token:
            - write:apiKey
            - read:apiKey
components:
  schemas:
    Login:
      type: object
      properties:
        email:
          type: string
          example: yourmail@gmail.com
        password:
          type: string
          example: secret
    User:
      type: object
      properties:
        _id:
          type: string
          example: asdasdasdasd
        email:
          type: string
          example: admin@gmail.com
        role:
          type: string
          example: admin
    Mahasiswa:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: John Doe
        studentId:
          type: string
          example: 123456
        email:
          type: string
          example: john@example.com
    MahasiswaArray:
      description: List of Mahasiswa objects
      type: array
      items:
        $ref: "#/components/schemas/Mahasiswa"
    AuthResponse:
      type: object
      properties:
        status:
          type: bool
          example: true
        message:
          type: string
          example: message
        token:
          type: string
          example: token
    Mitra:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Mitra Name
        address:
          type: string
          example: Mitra Address
        contact:
          type: string
          example: contact@example.com
    MitraArray:
      description: List of Mitra objects
      type: array
      items:
        $ref: "#/components/schemas/Mitra"
    Pembimbing:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Pembimbing Name
        email:
          type: string
          example: pembimbing@example.com
    PembimbingArray:
      description: List of Pembimbing objects
      type: array
      items:
        $ref: "#/components/schemas/Pembimbing"
    Mentor:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Mentor Name
        email:
          type: string
          example: mentor@example.com
    MentorArray:
      description: List of Mentor objects
      type: array
      items:
        $ref: "#/components/schemas/Mentor"
    Magang:
      type: object
      properties:
        id:
          type: string
          example: 1
        name:
          type: string
          example: Magang Name
        duration:
          type: string
          example: 3 months
        location:
          type: string
          example: Magang Location
    MagangArray:
      description: List of Magang objects
      type: array
      items:
        $ref: "#/components/schemas/Magang"
    MahasiswaMagang:
      type: object
      properties:
        id:
          type: string
          example: 1
        mahasiswaId:
          type: string
          example: 123456
        magangId:
          type: string
          example: 789012
    MahasiswaMagangArray:
      description: List of Mahasiswa Magang objects
      type: array
      items:
        $ref: "#/components/schemas/MahasiswaMagang"
  requestBodies:
    AuthReq:
      description: Request Authentication
      content:
        application/json:
          schema:
            $ref: "#/components/schemas/Login"
    UserArray:
      description: List of user object
      content:
        application/json:
          schema:
            type: array
            items:
              $ref: "#/components/schemas/AuthResponse"
  securitySchemes:
    token:
      type: apiKey
      name: Authorization
      in: header